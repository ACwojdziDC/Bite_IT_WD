// <auto-generated />
using System;
using Bite_IT.Data;
using Bite_IT.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Bite_IT.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    [Migration("20210905120939_createdatabase")]
    partial class createdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "meal_type", new[] { "soup", "main_dish", "dessert", "drink", "gluten_free", "lactose_free", "vegetarian", "vegan" })
                .HasPostgresEnum(null, "product_name", new[] { "schnitzel", "beetroot", "potato", "carrot", "fries", "tomato", "rice", "beef", "pork", "peppers", "mushroom", "pasta", "orange" })
                .HasPostgresEnum(null, "product_type", new[] { "appetiser", "soup" })
                .HasPostgresEnum(null, "promotion_type", new[] { "meal_of_the_day", "regular" })
                .HasPostgresEnum(null, "status", new[] { "active" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Bite_IT.Domain.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductName = "Beef",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 2,
                            ProductName = "Beetroot",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 3,
                            ProductName = "Carrot",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 4,
                            ProductName = "Fries",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 5,
                            ProductName = "Mushroom",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 6,
                            ProductName = "Orange",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 7,
                            ProductName = "Pasta",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 8,
                            ProductName = "Peppers",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 9,
                            ProductName = "Pork",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 10,
                            ProductName = "Potato",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 11,
                            ProductName = "Rice",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 12,
                            ProductName = "Schnitzel",
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 13,
                            ProductName = "Tomato",
                            Quantity = 2f
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FilterMarkers")
                        .HasColumnType("text");

                    b.Property<MealType>("MealType")
                        .HasColumnType("meal_type");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<PromotionType>("PromotionType")
                        .HasColumnType("promotion_type");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Zupa pomidorowa ze świeżych pomidorów z dodatkiem bazylii",
                            FilterMarkers = "[\"GlutenFree\",\"LactoseFree\",\"Vegetarian\"]",
                            MealType = MealType.Soup,
                            MenuId = 1,
                            Name = "Zupa Pomidorowa",
                            Price = 35m,
                            PromotionType = PromotionType.MealOfTheDay
                        },
                        new
                        {
                            Id = 2,
                            Description = "Spaghetti bolognese",
                            FilterMarkers = "[\"LactoseFree\"]",
                            MealType = MealType.MainDish,
                            MenuId = 1,
                            Name = "Spaghetti bolognese",
                            Price = 48m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sok pomarańczowy",
                            MealType = MealType.Drink,
                            MenuId = 1,
                            Name = "Sok wyciskany ze świeżych pomarańczy",
                            Price = 12m,
                            PromotionType = PromotionType.MealOfTheDay
                        },
                        new
                        {
                            Id = 4,
                            Description = "Szarlotka",
                            MealType = MealType.Dessert,
                            MenuId = 1,
                            Name = "Szarlotka z lodami i bitą śmietaną",
                            Price = 15m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 5,
                            Description = "Gnocchi z boczkiem",
                            MealType = MealType.MainDish,
                            MenuId = 1,
                            Name = "Gnocchi z boczkiem",
                            Price = 38m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 6,
                            Description = "Lemoniada miętowa",
                            MealType = MealType.Drink,
                            MenuId = 1,
                            Name = "Lemoniada miętowa",
                            Price = 12m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 7,
                            Description = "Tiramisu",
                            MealType = MealType.Dessert,
                            MenuId = 1,
                            Name = "Tiramisu",
                            Price = 19m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 8,
                            Description = "Gazpacho",
                            MealType = MealType.Soup,
                            MenuId = 1,
                            Name = "Gazpacho",
                            Price = 14m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 9,
                            Description = "Lasagna",
                            MealType = MealType.MainDish,
                            MenuId = 1,
                            Name = "Lasagna naleśnikowa",
                            Price = 19m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 10,
                            Description = "Prawdziwe lody",
                            MealType = MealType.Dessert,
                            MenuId = 1,
                            Name = "Prawdziwe lody z owocami i bitą śmietaną",
                            Price = 12m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 11,
                            Description = "Lemoniada arbuzowa",
                            MealType = MealType.Drink,
                            MenuId = 1,
                            Name = "Lemoniada arbuzowa",
                            Price = 12m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 12,
                            Description = "Zupa z domowej kiszonej kpusty na wywarze z wędzonych żeberk i boczku",
                            FilterMarkers = "[\"GlutenFree\",\"LactoseFree\"]",
                            MealType = MealType.Soup,
                            MenuId = 1,
                            Name = "Kwaśnica",
                            Price = 12m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 13,
                            Description = "Pikantna zupa na mięsie wołowym",
                            FilterMarkers = "[]",
                            MealType = MealType.Soup,
                            MenuId = 1,
                            Name = "Zupa gulaszowa",
                            Price = 16m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 14,
                            Description = "Placek drożdżowy z sezonowym owocem",
                            FilterMarkers = "[\"GlutenFree\",\"Vegetarian\"]",
                            MealType = MealType.Dessert,
                            MenuId = 1,
                            Name = "Miała baba placek",
                            Price = 10m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 15,
                            Description = "Placek kokosowo-czekoladowy z żurawiną i kokosem",
                            FilterMarkers = "[\"GlutenFree\",\"LactoseFree\",\"Vegetarian\"]",
                            MealType = MealType.Dessert,
                            MenuId = 1,
                            Name = "Murzynek",
                            Price = 15m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 16,
                            Description = "Coca-Cola z lodem",
                            FilterMarkers = "[\"GlutenFree\",\"LactoseFree\",\"Vegetarian\"]",
                            MealType = MealType.Drink,
                            MenuId = 1,
                            Name = "Coca-Cola",
                            Price = 5m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 17,
                            Description = "Herbata w różnych smakach: czarna, zielona, biała, owocowa",
                            FilterMarkers = "[\"GlutenFree\",\"LactoseFree\",\"Vegetarian\"]",
                            MealType = MealType.Drink,
                            MenuId = 1,
                            Name = "Herbata",
                            Price = 7m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 18,
                            Description = "Placek ziemniaczany z gulaszem wołowym",
                            FilterMarkers = "[\"GlutenFree\",\"LactoseFree\"]",
                            MealType = MealType.MainDish,
                            MenuId = 1,
                            Name = "Jadło drwala",
                            Price = 27m,
                            PromotionType = PromotionType.Regular
                        },
                        new
                        {
                            Id = 19,
                            Description = "Naleśniki z białym serem, owocami lub czekoladą",
                            FilterMarkers = "[\"Vegetarian\"]",
                            MealType = MealType.MainDish,
                            MenuId = 1,
                            Name = "Naleśniki",
                            Price = 8m,
                            PromotionType = PromotionType.Regular
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.MealsIngredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("MealId")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("MealsIngredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 3,
                            MealId = 1
                        },
                        new
                        {
                            IngredientId = 11,
                            MealId = 1
                        },
                        new
                        {
                            IngredientId = 13,
                            MealId = 1
                        },
                        new
                        {
                            IngredientId = 5,
                            MealId = 2
                        },
                        new
                        {
                            IngredientId = 7,
                            MealId = 2
                        },
                        new
                        {
                            IngredientId = 8,
                            MealId = 2
                        },
                        new
                        {
                            IngredientId = 9,
                            MealId = 2
                        },
                        new
                        {
                            IngredientId = 13,
                            MealId = 2
                        },
                        new
                        {
                            IngredientId = 6,
                            MealId = 3
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<Status>("Status")
                        .HasColumnType("status");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RestaurantId = 1,
                            Status = Status.Active
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1989),
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1988),
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MealId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Bite_IT.Domain.ProductInStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("ProductsInStock");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Quantity = 2f,
                            StockId = 1
                        },
                        new
                        {
                            Id = 2,
                            Quantity = 3f,
                            StockId = 1
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductInStockId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductInStockId");

                    b.ToTable("ProductItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2010),
                            ProductInStockId = 1,
                            Quantity = 2f
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2008),
                            ProductInStockId = 2,
                            Quantity = 1f
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Restaurant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ul.Kolejowa 2",
                            Email = "wloskismak@gmail.com",
                            Name = "Włoski smak",
                            PhoneNumber = "123456789"
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Magazyn",
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bite_IT.Domain.Employee", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("BirthDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasIndex("RestaurantId");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = "3b4b2f48-5250-4401-9fe8-ab59c792533f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff7c1c98-9c36-4b62-b2fa-635dc0637de7",
                            Email = "akowalski@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "12345",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "990ba165-0baf-4a56-8925-8f789fc7dc17",
                            TwoFactorEnabled = false,
                            UserName = "akowalski",
                            BirthDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Adam",
                            LastName = "Kowalski",
                            RestaurantId = 1,
                            Role = 0
                        },
                        new
                        {
                            Id = "7236b251-6a2a-4119-af82-98d9cd150ee8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90e51c1d-9dba-4ff1-9a8c-2ab0f6c840a4",
                            Email = "knowak@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "abcde",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2eb19bd7-ae31-4782-9010-14be02adf463",
                            TwoFactorEnabled = false,
                            UserName = "knowak",
                            BirthDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Karol",
                            LastName = "Nowak",
                            RestaurantId = 1,
                            Role = 1
                        });
                });

            modelBuilder.Entity("Bite_IT.Domain.Meal", b =>
                {
                    b.HasOne("Bite_IT.Domain.Menu", "Menu")
                        .WithMany("Meals")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Bite_IT.Domain.MealsIngredient", b =>
                {
                    b.HasOne("Bite_IT.Domain.Ingredient", "Ingredient")
                        .WithMany("MealsIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bite_IT.Domain.Meal", "Meal")
                        .WithMany("MealsIngredients")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Bite_IT.Domain.Menu", b =>
                {
                    b.HasOne("Bite_IT.Domain.Restaurant", "Restaurant")
                        .WithOne("Menu")
                        .HasForeignKey("Bite_IT.Domain.Menu", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Bite_IT.Domain.Order", b =>
                {
                    b.HasOne("Bite_IT.Domain.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Bite_IT.Domain.OrderLine", b =>
                {
                    b.HasOne("Bite_IT.Domain.Meal", "Meal")
                        .WithMany("OrderLines")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bite_IT.Domain.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Bite_IT.Domain.ProductInStock", b =>
                {
                    b.HasOne("Bite_IT.Domain.Stock", "Stock")
                        .WithMany("Products")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Bite_IT.Domain.ProductItem", b =>
                {
                    b.HasOne("Bite_IT.Domain.ProductInStock", "ProductInStock")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductInStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInStock");
                });

            modelBuilder.Entity("Bite_IT.Domain.Stock", b =>
                {
                    b.HasOne("Bite_IT.Domain.Restaurant", "Restaurant")
                        .WithMany("Stocks")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bite_IT.Domain.Employee", b =>
                {
                    b.HasOne("Bite_IT.Domain.Restaurant", "Restaurant")
                        .WithMany("Employees")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Bite_IT.Domain.Ingredient", b =>
                {
                    b.Navigation("MealsIngredients");
                });

            modelBuilder.Entity("Bite_IT.Domain.Meal", b =>
                {
                    b.Navigation("MealsIngredients");

                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("Bite_IT.Domain.Menu", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Bite_IT.Domain.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("Bite_IT.Domain.ProductInStock", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Bite_IT.Domain.Restaurant", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Menu");

                    b.Navigation("Orders");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Bite_IT.Domain.Stock", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
